require 'qml'
require_relative 'example-config-parser'
require_relative 'config-parser'
require_relative 'version'

module SDDMConfigurationEditor
  class Section
    include QML::Access
    register_to_qml

    ATTRIBUTES = [:section, :settings]
    ATTRIBUTES.each do |attribute|
      property(attribute) {instance_variable_get "@#{attribute}"}
    end

    def initialize(hash)
      populate(hash)
      super()
    end

    def [](name)
      send(name)
    end

    def populate(hash)
      ATTRIBUTES.each do |attribute|
        self.instance_variable_set "@#{attribute}", hash[attribute]
      end
    end
  end

  class Setting
    include QML::Access
    register_to_qml

    ATTRIBUTES = [:key, :value, :default_value, :label, :type, :description]
    ATTRIBUTES.each do |attribute|
      property(attribute) {instance_variable_get "@#{attribute}"}
    end

    def initialize(hash)
      populate(hash)
      super()
    end

    def [](name)
      send(name)
    end

    def populate(hash)
      ATTRIBUTES.each do |attribute|
        self.instance_variable_set "@#{attribute}", hash[attribute]
      end
    end

    def isDefined
      value && value != '' || value == false
    end
  end

  class Configuration
    def find_counterparts(array1, array2, key, &block)
      array1.each do |item1|
        found = array2.find do |item2|
          item2[key] == item1[key]
        end
        yield [item1, found]
      end
    end

    attr_reader :model
    def initialize
      parse_schema
      parse_values
    end

    def parse_schema(config_example_file=File.read('data/example.conf'))
      @model = ExampleConfigParser.new.parse(File.read('data/example.conf'))

      # Replace the setting hashes with Setting objects
      @model.each do |section|
        settings = section[:settings]
        settings.map! do |setting_data|
          Setting.new(setting_data)
        end
      end

      @model.map! do |section_data|
        Section.new(section_data)
      end
      @model
    end

    def parse_values(config_values_file=File.read('/etc/sddm.conf'))
      config_values = ConfigParser.new.parse(config_values_file)
      # Merge values into schema
      find_counterparts(@model, config_values, :section) do
        |(schema_section, value_section)|
        if value_section
          value_settings = value_section[:settings]
          schema_settings = schema_section.settings
          find_counterparts(schema_settings, value_settings, :key) do
            |schema_setting, value_setting|
            if value_setting
              schema_setting.value = value_setting[:value]
            end
          end
        end
      end
      @model
    end

    def generate_file
      ''.tap do |content|
        content << "# Generated by SDDM Configuration Editor\n"
        @model.each do |section|
          changed_settings = section.settings.select do |setting|
            setting.isDefined
          end
          unless changed_settings.empty?
            content << "[#{section.section}]\n"
            changed_settings.each do |setting|
              content << "#{setting.key}=#{setting.value}\n"
            end
            content << "\n"
          end
        end
      end
    end
  end
end

