#include "configuration.h"
#include <QJsonDocument>
#include <QJsonArray>
#include <QJsonObject>
#include <QFile>
#include <QSettings>
#include <QDebug>
#include "section.h"

Configuration::Configuration(QObject* parent) : QObject(parent),
  m_sections()
{
  m_controller = parent;
}

void Configuration::loadSchema(const QJsonArray& schema)
{
  for(QJsonArray::const_iterator element = schema.begin();
      element != schema.end(); element++) {
    if(!element->isObject()) {
      qDebug() << "Malformed configuration schema";
    } else {
      Section *section = Section::fromJson(element->toObject(), this);
      m_sections.append(section);
    }
  }
}

void Configuration::loadSettings(QSettings& settings)
{
  foreach (const QString &name, settings.childGroups()) {
    settings.beginGroup(name);
    Section* section = sectionWithName(name);
    if(!section) {
      qDebug() << "Section [" << name << "] not in schema";
    } else {

      foreach (const QString &key, settings.childKeys()) {
        Setting* setting = section->settingWithKey(key);
        if(!setting) {
          qDebug() << "Setting [" << name << "]/" << key << " not in schema";
        } else {
          setting->setProperty("value", settings.value(key).toString());
        }
      }
    }

    settings.endGroup();
  }
}

Section* Configuration::sectionWithName(const QString& name)
{
  foreach(QObject* section, m_sections) {
    if(section->property("name") == name) {
      return reinterpret_cast<Section*>(section);
    }
  }
  return 0;
}

QList<QObject*> Configuration::model()
{
  return m_sections;
}

QString Configuration::toFile() const
{
  QString file = "# Generated by SDDM Configuration Editor\n";
  foreach(QObject* section, m_sections) {
    file += reinterpret_cast<Section*>(section)->toString();
  }
  return file;
}

